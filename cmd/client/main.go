package main

import (
	"context"
	"encoding/csv"
	"fmt"
	"log"
	"math/rand"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	pb "pingshow/pkg/proto"
)

func main() {
	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Table Service
	tableConn, err := grpc.Dial("localhost:8889", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Table Service: %v", err)
	}
	defer tableConn.Close()
	

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Player Service
	playerConn, err := grpc.Dial("localhost:8888", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Player Service: %v", err)
	}
	defer playerConn.Close()
	playerClient := pb.NewPlayerServiceClient(playerConn)

	var wg sync.WaitGroup
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()


	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-sigCh
		cancel()
	}()

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	csvFile, err := os.Create("match_log.csv")
	if err != nil {
		log.Fatalf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV: %v", err)
	}
	defer csvFile.Close()


	csvWriter := csv.NewWriter(csvFile)
	defer csvWriter.Flush()

	// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
	csvWriter.Write([]string{"Time", "Event", "Player", "Power", "Goroutine", "Match Number", "Turn"})

	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx.Done():
				return
			default:
				// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô Player Service
				latestMatch, err := playerClient.GetPlayerInfo(ctx, &pb.PlayerRequest{PlayerId: "A"})
				if err != nil {
					log.Printf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A ‡πÑ‡∏î‡πâ: %v", err)
					return
				}
				
				
				matchNumber := latestMatch.TotalGames + 1
				
				fmt.Printf("\n========================================\n")
				fmt.Printf("üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏°‡∏ï‡∏ä‡πå: %d\n", matchNumber)
				fmt.Printf("========================================\n\n")
				// ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: matchNumber := latestMatch.TotalGames
				
				// ‡πÄ‡∏£‡∏¥‡πà‡∏° goroutine ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A ‡πÅ‡∏•‡∏∞ B
				playerAChan := make(chan int32, 1)
				playerBChan := make(chan int32, 1)
				
				// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
				currentTime := time.Now().Format(time.RFC3339)
				csvWriter.Write([]string{
					currentTime,
					"start_game",
					"System",
					"0",
					"main",
					strconv.Itoa(int(matchNumber)),
					"0",
				})
				
				// ‡πÄ‡∏£‡∏¥‡πà‡∏° goroutine ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A
				go func(ctx context.Context, matchNum int32) {
					goroutineA := fmt.Sprintf("A-%d", time.Now().UnixNano())
					turn := 1
					
					// ‡∏™‡∏∏‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
					initialPower := int32(rand.Intn(50) + 50) // 50-100
					
					// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° goroutine A
					currentTime := time.Now().Format(time.RFC3339)
					csvWriter.Write([]string{
						currentTime,
						"wake_up",
						"A",
						"0",
						goroutineA,
						strconv.Itoa(int(matchNum)),
						strconv.Itoa(turn),
					})
					
					// ‡∏™‡πà‡∏á ping ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
					fmt.Printf("‚è∞ %s | üéÆ A | üí™ %d | üßµ %s | #%d | ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n",
						currentTime, initialPower, goroutineA, matchNum, turn)
					
					// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ping
					csvWriter.Write([]string{
						currentTime,
						"ping",
						"A",
						strconv.Itoa(int(initialPower)),
						goroutineA,
						strconv.Itoa(int(matchNum)),
						strconv.Itoa(turn),
					})
					
					// ‡∏™‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ Table Service
					playerAChan <- initialPower
					
					// ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å B
					for {
						select {
						case <-ctx.Done():
							return
						case power := <-playerAChan:
							turn += 2 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô (A ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏≠‡∏ö‡∏Ñ‡∏µ‡πà)
							
							// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á A
							currentTime = time.Now().Format(time.RFC3339)
							csvWriter.Write([]string{
								currentTime,
								"wake_up",
								"A",
								strconv.Itoa(int(power)),
								goroutineA,
								strconv.Itoa(int(matchNum)),
								strconv.Itoa(turn),
							})
							
							// ‡∏™‡∏∏‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
							newPower := int32(rand.Intn(50) + 50) // 50-100
							
							fmt.Printf("‚è∞ %s | üéÆ A | üí™ %d | üßµ %s | #%d | ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n",
								currentTime, newPower, goroutineA, matchNum, turn)
							
							// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ping
							csvWriter.Write([]string{
								currentTime,
								"ping",
								"A",
								strconv.Itoa(int(newPower)),
								goroutineA,
								strconv.Itoa(int(matchNum)),
								strconv.Itoa(turn),
							})
							
							// ‡∏™‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ Table Service
							playerAChan <- newPower
						}
					}
				}(ctx, matchNumber)
				
				// ‡πÄ‡∏£‡∏¥‡πà‡∏° goroutine ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô B
				gameFinished := make(chan struct{}, 1) // ‡∏™‡∏£‡πâ‡∏≤‡∏á channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏à‡∏ö
				
				go func(ctx context.Context, matchNum int32) {
					goroutineB := fmt.Sprintf("B-%d", time.Now().UnixNano())
					turn := 2
					
					// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° goroutine B
					currentTime := time.Now().Format(time.RFC3339)
					csvWriter.Write([]string{
						currentTime,
						"wake_up",
						"B",
						"0",
						goroutineB,
						strconv.Itoa(int(matchNum)),
						strconv.Itoa(turn),
					})
					
					for {
						select {
						case <-ctx.Done():
							return
						case tablePower := <-playerBChan:
							// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á B
							currentTime = time.Now().Format(time.RFC3339)
							csvWriter.Write([]string{
								currentTime,
								"wake_up",
								"B",
								strconv.Itoa(int(tablePower)),
								goroutineB,
								strconv.Itoa(int(matchNum)),
								strconv.Itoa(turn),
							})
							
							// ‡∏™‡∏∏‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á B
							bPower := int32(rand.Intn(100) + 1) // 1-100
							
							fmt.Printf("‚è∞ %s | üéÆ B | üí™ %d | üßµ %s | #%d | ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n",
								currentTime, bPower, goroutineB, matchNum, turn)
							
							// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á pong
							csvWriter.Write([]string{
								currentTime,
								"pong",
								"B",
								strconv.Itoa(int(bPower)),
								goroutineB,
								strconv.Itoa(int(matchNum)),
								strconv.Itoa(turn),
							})
							
							// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ B ‡∏ä‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡πâ
							if bPower > tablePower {
								// B ‡∏ä‡∏ô‡∏∞‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ ‡∏™‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ A
								playerAChan <- bPower
								turn += 2 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô (B ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏≠‡∏ö‡∏Ñ‡∏π‡πà)
							} else {
								// B ‡πÅ‡∏û‡πâ ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
								currentTime = time.Now().Format(time.RFC3339)
								fmt.Printf("‚è∞ %s | üéÆ B | üí• ‡πÅ‡∏û‡πâ! | üßµ %s | #%d | ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n",
									currentTime, goroutineB, matchNum, turn)
								
								// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ
								csvWriter.Write([]string{
									currentTime,
									"lose",
									"B",
									strconv.Itoa(int(bPower)),
									goroutineB,
									strconv.Itoa(int(matchNum)),
									strconv.Itoa(turn),
								})
								
								// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏ö‡πÄ‡∏Å‡∏°
								csvWriter.Write([]string{
									currentTime,
									"game_over",
									"System",
									"0",
									"main",
									strconv.Itoa(int(matchNum)),
									strconv.Itoa(turn),
								})
								
								// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A (‡∏ä‡∏ô‡∏∞)
								_, err = playerClient.UpdatePlayerStats(ctx, &pb.PlayerStats{
									PlayerId:  "A",
									Win:       true,
									PowerUsed: 50,
								})
								if err != nil {
									log.Printf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A ‡πÑ‡∏î‡πâ: %v", err)
								}
								
								// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô B (‡πÅ‡∏û‡πâ)
								_, err = playerClient.UpdatePlayerStats(ctx, &pb.PlayerStats{
									PlayerId:  "B",
									Win:       false,
									PowerUsed: 50,
								})
								if err != nil {
									log.Printf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô B ‡πÑ‡∏î‡πâ: %v", err)
								}
								
								// ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
								gameFinished <- struct{}{}
								return
							}
						}
					}
				}(ctx, matchNumber)
				
				// ‡∏à‡∏≥‡∏•‡∏≠‡∏á Table Service
				go func(ctx context.Context, matchNum int32) {
					for {
						select {
						case <-ctx.Done():
							return
						case power := <-playerAChan:
							// ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ (‡∏•‡∏î‡∏û‡∏•‡∏±‡∏á 10-30%)
							reduction := float64(rand.Intn(20) + 10) / 100.0
							tablePower := int32(float64(power) * (1.0 - reduction))
							
							// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞
							currentTime := time.Now().Format(time.RFC3339)
							csvWriter.Write([]string{
								currentTime,
								"table_response",
								"Table",
								strconv.Itoa(int(tablePower)),
								"Table",
								strconv.Itoa(int(matchNum)),
								"0",
							})
							
							fmt.Printf("‚è∞ %s | üéÆ Table | üí™ %d | üßµ Table | #%d\n",
								currentTime, tablePower, matchNum)
							
							// ‡∏™‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô B
							time.Sleep(time.Millisecond * 200) // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
							playerBChan <- tablePower
						}
					}
				}(ctx, matchNumber)
				
				// ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏à‡∏ö
				select {
				case <-ctx.Done():
					return
				case <-gameFinished:
					fmt.Println("\nüëã ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß B ‡πÅ‡∏û‡πâ! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà...")
					// ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
					csvWriter.Flush() // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
					time.Sleep(2 * time.Second) // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
				}
			}
		}
	}()

	wg.Wait()
}